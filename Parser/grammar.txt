// program: varDeclarations stmts
// varDeclarations: varDeclaration varDeclarations
// varDeclarations: nullStr
// varDeclaration: INT declarationList SEMI
// declarationList: declaration COMMA declarationList
// declarationList: declaration
// declaration: ID ASSIGN INTNUM
// declaration: ID LSQUARE INTNUM RSQUARE
// declaration: ID
// codeBlock: stmt
// codeBlock: LBRACE stmts RBRACE
// stmts: stmt stmts
// stmts: stmt
// stmt: assignStmt SEMI
// stmt: controlStmt
// stmt: rwStmt SEMI
// stmt: SEMI
// controlStmt: ifStmts
// controlStmt: whileStmt
// controlStmt: dowhileStmt SEMI
// controlStmt: returnStmt SEMI
// rwStmt: rStmt
// rwStmt: wStmt
// assignStmt: ID LSQUARE exp RSQUARE ASSIGN exp
// assignStmt: ID ASSIGN exp
// ifStmts: ifStmt
// ifStmts: ifStmt ELSE codeBlock
// ifStmt: IF LPAR exp RPAR codeBlock
// whileStmt: WHILE LPAR exp RPAR codeBlock
// dowhileStmt: DO codeBlock WHILE LPAR exp RPAR
// returnStmt: RETURN
// rStmt: READ LPAR ID RPAR
// wStmt: WRITE LPAR exp RPAR
// exp: realExp OpExp
// realExp: ID
// realExp: ID LSQUARE exp RSQUARE
// realExp: NOT_OP exp
// realExp: LPAR exp RPAR
// realExp: MINUS exp
// OpExp: nullStr
// OpExp: AND_OP realExp OpExp
// OpExp: OR_OP realExp OpExp
// OpExp: PLUS realExp OpExp
// OpExp: MINUS realExp OpExp
// OpExp: MUL_OP realExp OpExp
// OpExp: DIV_OP realExp OpExp
// OpExp: LT realExp OpExp
// OpExp: GT realExp OpExp
// OpExp: EQ realExp OpExp
// OpExp: NOTEQ realExp OpExp
// OpExp: LTEQ realExp OpExp
// OpExp: GTEQ realExp OpExp
// OpExp: SHL_OP realExp OpExp
// OpExp: SHR_OP realExp OpExp
// OpExp: ANDAND realExp OpExp
// OpExp: OROR realExp OpExp